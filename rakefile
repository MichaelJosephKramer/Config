# frozen_string_literal: true

require 'rake'

desc 'do all the setup!'
task :default do
  dotfiles = Dir.glob('.*') - ['.git', '.gitmodules', '.', '..', '.gitignore']
  symlink_files(ENV['HOME'], dotfiles)
  symlink_files("#{ENV['XDG_CONFIG_HOME']}/git", ['ignore'])
end

def symlink_files(destination, files)
  @destination = destination

  files.each do |file|
    if file_identical?(file) then skip_identical_file(file)
    elsif replace_all_files?    then link_file(file)
    elsif file_missing?(file)   then link_file(file)
    else prompt_to_link_file(file)
    end
  end
end

# FILE CHECKS
def file_exists?(file)
  File.exist?("#{@destination}/#{file}")
end

def file_missing?(file)
  !file_exists?(file)
end

def file_identical?(file)
  File.identical? file, File.join(@destination, file.to_s)
end

def replace_all_files?
  @replace_all == true
end

# FILE ACTIONS
def prompt_to_link_file(file)
  print "overwrite? ~/#{file} [ynaq]  "
  case $stdin.gets.chomp
  when 'y' then replace_file(file)
  when 'a' then replace_all(file)
  when 'q' then exit
  else skip_file(file)
  end
end

def link_file(file)
  puts " => symlinking #{file}"
  directory = File.dirname(__FILE__)
  sh("ln -s #{File.join(directory, file)} #{@destination}/#{file}")
end

def replace_file(file)
  sh "rm -rf #{@destination}/#{file}"
  link_file(file)
end

def replace_all(file)
  @replace_all = true
  replace_file(file)
end

def skip_file(file)
  puts " => skipping ~/#{file}"
end

def skip_identical_file(file)
  puts " => skipping identical #{@destination}/#{file}"
end
